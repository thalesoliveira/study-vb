'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="northwnd")>
Partial Public Class linqDataContext
    Inherits System.Data.Linq.DataContext

    Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertCategory(instance As Category)
    End Sub
    Partial Private Sub UpdateCategory(instance As Category)
    End Sub
    Partial Private Sub DeleteCategory(instance As Category)
    End Sub
    Partial Private Sub InsertProduct(instance As Product)
    End Sub
    Partial Private Sub UpdateProduct(instance As Product)
    End Sub
    Partial Private Sub DeleteProduct(instance As Product)
    End Sub
#End Region

    Public Sub New()
        MyBase.New(Global.Linq_sql.My.MySettings.Default.northwndConnectionString, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
        Get
            Return Me.GetTable(Of Category)
        End Get
    End Property

    Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
        Get
            Return Me.GetTable(Of Product)
        End Get
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Categories")>
Partial Public Class Category
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CategoryID As Integer

    Private _CategoryName As String

    Private _Description As String

    Private _Picture As System.Data.Linq.Binary

    Private _Products As EntitySet(Of Product)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPictureChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPictureChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property CategoryID() As Integer
        Get
            Return Me._CategoryID
        End Get
        Set
            If ((Me._CategoryID = Value) _
                        = False) Then
                Me.OnCategoryIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CategoryID = Value
                Me.SendPropertyChanged("CategoryID")
                Me.OnCategoryIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)>
    Public Property CategoryName() As String
        Get
            Return Me._CategoryName
        End Get
        Set
            If (String.Equals(Me._CategoryName, Value) = False) Then
                Me.OnCategoryNameChanging(Value)
                Me.SendPropertyChanging()
                Me._CategoryName = Value
                Me.SendPropertyChanged("CategoryName")
                Me.OnCategoryNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me.OnDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._Description = Value
                Me.SendPropertyChanged("Description")
                Me.OnDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>
    Public Property Picture() As System.Data.Linq.Binary
        Get
            Return Me._Picture
        End Get
        Set
            If (Object.Equals(Me._Picture, Value) = False) Then
                Me.OnPictureChanging(Value)
                Me.SendPropertyChanging()
                Me._Picture = Value
                Me.SendPropertyChanged("Picture")
                Me.OnPictureChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Products", ThisKey:="CategoryID", OtherKey:="CategoryID")>
    Public Property Products() As EntitySet(Of Product)
        Get
            Return Me._Products
        End Get
        Set
            Me._Products.Assign(Value)
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_Products(ByVal entity As Product)
        Me.SendPropertyChanging()
        entity.Category = Me
    End Sub

    Private Sub detach_Products(ByVal entity As Product)
        Me.SendPropertyChanging()
        entity.Category = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Products")>
Partial Public Class Product
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ProductID As Integer

    Private _ProductName As String

    Private _SupplierID As System.Nullable(Of Integer)

    Private _CategoryID As System.Nullable(Of Integer)

    Private _QuantityPerUnit As String

    Private _UnitPrice As System.Nullable(Of Decimal)

    Private _UnitsInStock As System.Nullable(Of Short)

    Private _UnitsOnOrder As System.Nullable(Of Short)

    Private _ReorderLevel As System.Nullable(Of Short)

    Private _Discontinued As Boolean

    Private _Category As EntityRef(Of Category)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnSupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSupplierIDChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnQuantityPerUnitChanging(value As String)
    End Sub
    Partial Private Sub OnQuantityPerUnitChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnUnitsInStockChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnUnitsInStockChanged()
    End Sub
    Partial Private Sub OnUnitsOnOrderChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnUnitsOnOrderChanged()
    End Sub
    Partial Private Sub OnReorderLevelChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnReorderLevelChanged()
    End Sub
    Partial Private Sub OnDiscontinuedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDiscontinuedChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._Category = CType(Nothing, EntityRef(Of Category))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property ProductID() As Integer
        Get
            Return Me._ProductID
        End Get
        Set
            If ((Me._ProductID = Value) _
                        = False) Then
                Me.OnProductIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ProductID = Value
                Me.SendPropertyChanged("ProductID")
                Me.OnProductIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
    Public Property ProductName() As String
        Get
            Return Me._ProductName
        End Get
        Set
            If (String.Equals(Me._ProductName, Value) = False) Then
                Me.OnProductNameChanging(Value)
                Me.SendPropertyChanging()
                Me._ProductName = Value
                Me.SendPropertyChanged("ProductName")
                Me.OnProductNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="Int")>
    Public Property SupplierID() As System.Nullable(Of Integer)
        Get
            Return Me._SupplierID
        End Get
        Set
            If (Me._SupplierID.Equals(Value) = False) Then
                Me.OnSupplierIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SupplierID = Value
                Me.SendPropertyChanged("SupplierID")
                Me.OnSupplierIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int")>
    Public Property CategoryID() As System.Nullable(Of Integer)
        Get
            Return Me._CategoryID
        End Get
        Set
            If (Me._CategoryID.Equals(Value) = False) Then
                If Me._Category.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnCategoryIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CategoryID = Value
                Me.SendPropertyChanged("CategoryID")
                Me.OnCategoryIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")>
    Public Property QuantityPerUnit() As String
        Get
            Return Me._QuantityPerUnit
        End Get
        Set
            If (String.Equals(Me._QuantityPerUnit, Value) = False) Then
                Me.OnQuantityPerUnitChanging(Value)
                Me.SendPropertyChanging()
                Me._QuantityPerUnit = Value
                Me.SendPropertyChanged("QuantityPerUnit")
                Me.OnQuantityPerUnitChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money")>
    Public Property UnitPrice() As System.Nullable(Of Decimal)
        Get
            Return Me._UnitPrice
        End Get
        Set
            If (Me._UnitPrice.Equals(Value) = False) Then
                Me.OnUnitPriceChanging(Value)
                Me.SendPropertyChanging()
                Me._UnitPrice = Value
                Me.SendPropertyChanged("UnitPrice")
                Me.OnUnitPriceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsInStock", DbType:="SmallInt")>
    Public Property UnitsInStock() As System.Nullable(Of Short)
        Get
            Return Me._UnitsInStock
        End Get
        Set
            If (Me._UnitsInStock.Equals(Value) = False) Then
                Me.OnUnitsInStockChanging(Value)
                Me.SendPropertyChanging()
                Me._UnitsInStock = Value
                Me.SendPropertyChanged("UnitsInStock")
                Me.OnUnitsInStockChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsOnOrder", DbType:="SmallInt")>
    Public Property UnitsOnOrder() As System.Nullable(Of Short)
        Get
            Return Me._UnitsOnOrder
        End Get
        Set
            If (Me._UnitsOnOrder.Equals(Value) = False) Then
                Me.OnUnitsOnOrderChanging(Value)
                Me.SendPropertyChanging()
                Me._UnitsOnOrder = Value
                Me.SendPropertyChanged("UnitsOnOrder")
                Me.OnUnitsOnOrderChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReorderLevel", DbType:="SmallInt")>
    Public Property ReorderLevel() As System.Nullable(Of Short)
        Get
            Return Me._ReorderLevel
        End Get
        Set
            If (Me._ReorderLevel.Equals(Value) = False) Then
                Me.OnReorderLevelChanging(Value)
                Me.SendPropertyChanging()
                Me._ReorderLevel = Value
                Me.SendPropertyChanged("ReorderLevel")
                Me.OnReorderLevelChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discontinued", DbType:="Bit NOT NULL")>
    Public Property Discontinued() As Boolean
        Get
            Return Me._Discontinued
        End Get
        Set
            If ((Me._Discontinued = Value) _
                        = False) Then
                Me.OnDiscontinuedChanging(Value)
                Me.SendPropertyChanging()
                Me._Discontinued = Value
                Me.SendPropertyChanged("Discontinued")
                Me.OnDiscontinuedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=True)>
    Public Property Category() As Category
        Get
            Return Me._Category.Entity
        End Get
        Set
            Dim previousValue As Category = Me._Category.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._Category.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._Category.Entity = Nothing
                    previousValue.Products.Remove(Me)
                End If
                Me._Category.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.Products.Add(Me)
                    Me._CategoryID = Value.CategoryID
                Else
                    Me._CategoryID = CType(Nothing, Nullable(Of Integer))
                End If
                Me.SendPropertyChanged("Category")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class
